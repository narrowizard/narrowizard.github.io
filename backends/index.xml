<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backends on NaRro</title>
    <link>https://narrowizard.github.io/backends/</link>
    <description>Recent content in Backends on NaRro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 14 Mar 2018 08:59:30 +0800</lastBuildDate>
    
	<atom:link href="https://narrowizard.github.io/backends/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>web前后端分离式开发实践</title>
      <link>https://narrowizard.github.io/backends/separate_end/</link>
      <pubDate>Wed, 14 Mar 2018 08:59:30 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/backends/separate_end/</guid>
      <description>阅读本文你需要了解(pre-knowledge)  javascript语法 http协议的基本知识  简述 我接触前后端分离这个概念, 最早是在使用ASP.NET MVC4的时候. 那时候主要做的就是把一个web项目分层, M-model, V-view, C-controller各司其职, 配合的也是非常好. 但是前后端分离的没那么彻底, 项目还是一整个项目.
随着vuejs, angular2, reactjs这些框架的逐渐成熟, 生态圈日渐完善, 前后端分离这个概念就变的越来越火了. 这些框架的发展, 算是给前端开发带来了革命性的变更(主要得益于HTML的新特性). 下面我就想讲一讲基于这些前端框架的&amp;rdquo;新型&amp;rdquo;前后端分离.
归根结底, 不管是哪种程度的分离, 最终目标都是为了解决以下一些问题(如不完善, 欢迎补充):
 解放开发人员, 使其能专注于各自的业务领域. 前端不用再搭建后端环境, 后端只需要专注api开发. 前后端项目分开部署, 后端不再需要对前端资源进行打包、压缩操作。  生产模式架构 下面我以 react + express(nodejs) + nirvana(go) 为例说明一种实用的前后端分离架构. express中间层 根据上图我们可以得知, express项目只需要实现两个功能.
 将react项目所在的目录设置为静态路由. 按需转发api请求.
  首先, 我们来看一下整个express项目的目录结构:
. ├── app # 前端静态目录 │ └── build # react打包后的文件 ├── app.js # express项目代码 ├── bin │ └── www # express项目入口文件 └── package.</description>
    </item>
    
  </channel>
</rss>