<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>伟大的渺小 on NaRro</title>
    <link>https://narrowizard.github.io/</link>
    <description>Recent content in 伟大的渺小 on NaRro</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sat, 27 Jan 2018 11:29:58 +0800</lastBuildDate>
    
	<atom:link href="https://narrowizard.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fatal: protocol error: bad line length character</title>
      <link>https://narrowizard.github.io/centos/fatal-protocol-error-bad-line-length-character/</link>
      <pubDate>Sat, 27 Jan 2018 11:29:58 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/centos/fatal-protocol-error-bad-line-length-character/</guid>
      <description>git的ssh客户端在收到错误信息后，会主动断开连接，并返回错误信息，但是信息内容不完整。
这个时候通过以下方法获取错误信息。
ssh &amp;lt;user&amp;gt;@&amp;lt;host&amp;gt; git-receive-pack &amp;lt;path-to-git-repository&amp;gt;  refer to:stackoverflow q8170436</description>
    </item>
    
    <item>
      <title>centos 常用配置</title>
      <link>https://narrowizard.github.io/centos/config/</link>
      <pubDate>Sat, 27 Jan 2018 11:27:27 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/centos/config/</guid>
      <description> 设置时间同步 #安装ntp yum install ntp #跟time.nist.gov同步时间 ntpdate time.nist.gov  设置静态ip  配置文件地址: /etc/sysconfig/network-scripts/ifcfg-eth0 参考配置  TYPE=Ethernet BOOTPROTO=static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_PEERDNS=yes IPV6_PEERROUTES=yes IPV6_FAILURE_FATAL=no NAME=eth0 UUID=aebdeada-4d90-4b7d-b7e9-e964bdd74caa DEVICE=eth0 ONBOOT=yes IPADDR=192.168.2.220 NETMASK=255.255.255.0 GATEWAY=192.168.2.1 DNS1=192.168.2.1   重启网络 systemctl restart network  </description>
    </item>
    
    <item>
      <title>EXIF属性信息</title>
      <link>https://narrowizard.github.io/photo/exif/</link>
      <pubDate>Sat, 27 Jan 2018 11:22:30 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/photo/exif/</guid>
      <description> Orientation(方向) MeteringMode(测光模式)  0 未知 1 平均 2 偏中心平均 3 点 4 多点 5 图案(多重) 6 部分 255 其他  Flash(闪光灯模式) ExposureProgram(曝光程序)  0 未知 1 手动 2 正常 3 光圈优先 4 快门优先 5 创作程序(偏重使用视野深度) 6 操作程序(偏重使用快门速度) 7 纵向模式 8 横向模式  WhiteBalance(白平衡)  0 自动 1 手动  LightSource(光源)  0 未知 1 日光 2 荧光 3 钨丝灯 4 闪光灯 9 晴天 10 多云 11 阴天 12 日光灯 13  </description>
    </item>
    
    <item>
      <title>Install docker on CentOS7</title>
      <link>https://narrowizard.github.io/docker/centos/</link>
      <pubDate>Sat, 27 Jan 2018 10:50:35 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/docker/centos/</guid>
      <description> Install docker on CentOS7 Required  os: x64 kernel: 3.10+
$ uname -r
  Step $ yum makecache $ yum update $ tee /etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;-&#39;EOF&#39; [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg EOF $ yum install docker-engine $ systemctl enable docker.service $ systemctl start docker  换docker源 使用配置文件/etc/docker/daemon.json，需要docker版本1.10以上
{ &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;&amp;lt;your accelerate address&amp;gt;&amp;quot;] }  常用命令 # 使用root打开docker bash docker exec -u 0 -it container_name bash # 从container复制文件到host docker cp &amp;lt;containerId&amp;gt;:/file/path/within/container /host/path/target # 从host复制文件到container docker cp /host/path/target &amp;lt;containerId&amp;gt;:/file/path/within/container # remove Exited container docker ps -a | grep Exited | awk &#39;{print $1}&#39; | xargs docker rm # remove images that without name or tag docker images | grep none | awk &#39;{print $3}&#39; | xargs docker rmi  </description>
    </item>
    
    <item>
      <title>gitlab迁移日志</title>
      <link>https://narrowizard.github.io/gitlab/migration/</link>
      <pubDate>Sat, 27 Jan 2018 10:42:19 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/gitlab/migration/</guid>
      <description> 由于公司服务器的更新，原本部署在老服务器上的gitlab需要迁移到新的服务器。
旧服务器信息 当时部署gitlab是直接使用官方的docker镜像的，版本为8.14.0-ce.0
使用外置的postgresql，也是用docker跑的一个container，版本为9.6.1
 postgres的data目录在/srv/data/db gitlab的data目录在/srv/data/gitlab/data gitlab的config目录在/srv/data/gitlab/config gitlab的log目录在/srv/data/gitlab/log  迁移步骤 原本可以直接使用gitlab的迁移工具备份并且迁移的，但是由于使用了外置的postgresql，导致数据库版本不匹配，所以只能手动迁移了。
 首先迁移数据库，直接将旧的数据库目录复制到新的服务器上，重新用docker跑一个新的postgresql container，并把数据目录挂载起来就ok了。 使用gitlab提供的迁移工具进行迁移，但是跳过数据库。  # 备份 gitlab-rake gitlab:backup:create SKIP=db # 恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1393513186编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1393513186 # 启动Gitlab sudo gitlab-ctl start  </description>
    </item>
    
    <item>
      <title>使用hugo搭建静态markdown博客</title>
      <link>https://narrowizard.github.io/hugo/build/</link>
      <pubDate>Fri, 26 Jan 2018 15:58:38 +0800</pubDate>
      
      <guid>https://narrowizard.github.io/hugo/build/</guid>
      <description>前言(这一段唠嗑,请自行跳过) 其实想要搞一个博客已经有一段时间了。由于种种原因（其实就是懒），一直没有真的动手。说起原因，我觉得比较重要的就是：现在市面上的博客已经有很多了，我也想不到什么特色功能，也就没有什么动力自己动手写一个博客。
之前有尝试过一些开源的项目，但是均以失败告终了（不是项目不好，是有其他原因的）。下面说说尝试过的一些开源项目:
 wordpress。wordpress是一个基于php的CMS，使用mysql作为数据库，功能十分完备，各种模板，支持后台管理，自定义模块什么的。不过我失败的原因，竟然是，我那1核1G的服务器根本跑不了wordpress啊，无奈只能放弃。 blog。这个博客系统呢，是小伙伴开发的，目的是为了测试tinygo框架。项目支持分类、文件管理、评论等博客常用的功能，这个博客系统我也用过一段时间，发现他的markdown编辑器有点难用，在加上UI不出众，所以决定找个新的。值得一提的是，得益于golang的性能，tinygo框架以及这个博客系统对系统资源的要求非常低，很好的解决了我在用wordpress时的尴尬。 jekyll。这个项目是在搞github page的时候发现的，那时候学到了一个新的概念，静态博客生成器。结合自己的需求，突然很喜欢这样的静态博客，总的来说就是简洁、够用。而且jekyll还有一个天生优势，那就是得到了github page的支持，这个优势非常明显，我们可以省下一大笔购买服务器的钱。但是我在用这个的时候呢，又碰壁了，得益于国内的网络环境，我尝试了好几次都不能安装成功（也许是我需要一个linux系统，我记得之前安装失败是报了个msys2的错）。能够成功安装jekyll的同学，我还是很看好这个项目的。
  然后就来到了hugo，这个项目简直完美满足我的所有需求啊，而且有很多很漂亮的主题。不过在使用过程中，还是踩了很多坑，下面就说说这整个过程。
安装 得益于golang的特性，编译后，我们就可以得到一个hugo的可执行文件。如果只是想用hugo来写博客，而不是研究他的源码什么的，我建议直接到这里选择适合你操作系统的版本下载，因为只有一个可执行文件，太方便了。不推荐大家使用源码安装还是因为hugo有用到一些托管在golang.org上的package，很难下下来。
拿到hugo的可执行文件之后呢，就跟着官方的quickstart一路下来，基本没有什么大的问题（一开始尝试了一下换主题，不过由于没有很理解hugo的渲染逻辑，果断失败了，下次搞好了再写一篇关于主题的文章）。
如何使用hugo 一开始用 hugo new site your_site_path 创建一个hugo项目之后，我就懵了，可能是我没有乖乖按照quickstart的流程走，所以产生了这么多问题。
 我是谁？ 我在哪？ 我要干什么？ 我怎么设置分类？ 我怎么写文章？ 我怎么在首页显示列表？  经过一段时间的摸索之后，我发现hugo帮我们做了很多事情。下面就简要说说我用到的一些基础功能吧（以下内容以默认的ananke主题为主，没有试过别的主题，不知道是否一样）。
创建新文章 创建新文章用到了hugo的一个命令，hugo new path/file.md，这个命令会在content目录下根据你的参数来创建文章，并会在文件中加入一些配置信息(类似于模板一样的东西，模板文件为archetypes目录下的default.md)。
首页 首页是位于content目录下的_index.md文件。
分类 在content目录下创建子目录，hugo会将这些子目录识别为分类。每一个子目录下面都可以放一个_index.md文件，作为该分类的主页内容，这些内容会被渲染在分类列表页。
文章 在content目录或其子目录下创建md文件，hugo会将这些文件识别为文章，并根据目录归到相应的分类中去。
图片 放一张测试图片 我们在编写博文的时候，自然是需要用到图片的。我们可以在content目录或者static目录下面放置文件，然后用相对路径 ![](url/to/image.png) 的方式来引用图片就可以了，hugo会自动识别图片所在的位置并把图片放到相应的位置。
部署方案 刚开始上手hugo的时候，我想了两种部署方案。介于我在服务器上用了docker，所以想说一下第一种方案。
构建hugo的docker镜像，将hugo项目挂载到container里（deprecated） 这种方案并不好用，简单说一下，就是利用docker构建hugo的镜像（拉取hugo的源码，编译）跑一个容器，将hugo项目（就是我们的博客）clone到服务器的目录，通过volumes将该目录挂载到前面的容器。这个方案是打算用hugo当静态文件服务器使用的，但是后来看到了官方文档关于hugo_server的描述，加上尝试这种方案时遇到的一些问题（js，css引用链接不对），果断放弃了。官方原文如下：
 While hugo server is high performance, it is a webserver with limited options. Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy.</description>
    </item>
    
  </channel>
</rss>